# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/Command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Command(genpy.Message):
  _md5sum = "fc0a85df8be3034122897f9d6b86110f"
  _type = "mavros_msgs/Command"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
std_msgs/Header header

#enum Command
#{
#    Standby = 0,
#    Takeoff,
#    Hold,
#    Land,
#    Move,
#    Disarm,
#    Moving_Body
#};
# sub_mode 2-bit value: 
# 0 for position, 1 for vel, 1st for xy, 2nd for z.
#                   xy position     xy velocity
# z position       	0b00(0)       0b10(2)
# z velocity		0b01(1)       0b11(3)
#

uint32 comid
uint8 command
uint8 sub_mode
float32[3] pos_sp
float32[3] vel_sp
float32 yaw_sp
float32 yaw_rate_sp



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','comid','command','sub_mode','pos_sp','vel_sp','yaw_sp','yaw_rate_sp']
  _slot_types = ['std_msgs/Header','uint32','uint8','uint8','float32[3]','float32[3]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,comid,command,sub_mode,pos_sp,vel_sp,yaw_sp,yaw_rate_sp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.comid is None:
        self.comid = 0
      if self.command is None:
        self.command = 0
      if self.sub_mode is None:
        self.sub_mode = 0
      if self.pos_sp is None:
        self.pos_sp = [0.] * 3
      if self.vel_sp is None:
        self.vel_sp = [0.] * 3
      if self.yaw_sp is None:
        self.yaw_sp = 0.
      if self.yaw_rate_sp is None:
        self.yaw_rate_sp = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.comid = 0
      self.command = 0
      self.sub_mode = 0
      self.pos_sp = [0.] * 3
      self.vel_sp = [0.] * 3
      self.yaw_sp = 0.
      self.yaw_rate_sp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2B().pack(_x.comid, _x.command, _x.sub_mode))
      buff.write(_get_struct_3f().pack(*self.pos_sp))
      buff.write(_get_struct_3f().pack(*self.vel_sp))
      _x = self
      buff.write(_get_struct_2f().pack(_x.yaw_sp, _x.yaw_rate_sp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.comid, _x.command, _x.sub_mode,) = _get_struct_I2B().unpack(str[start:end])
      start = end
      end += 12
      self.pos_sp = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.vel_sp = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.yaw_sp, _x.yaw_rate_sp,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2B().pack(_x.comid, _x.command, _x.sub_mode))
      buff.write(self.pos_sp.tostring())
      buff.write(self.vel_sp.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.yaw_sp, _x.yaw_rate_sp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.comid, _x.command, _x.sub_mode,) = _get_struct_I2B().unpack(str[start:end])
      start = end
      end += 12
      self.pos_sp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.vel_sp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 8
      (_x.yaw_sp, _x.yaw_rate_sp,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I2B = None
def _get_struct_I2B():
    global _struct_I2B
    if _struct_I2B is None:
        _struct_I2B = struct.Struct("<I2B")
    return _struct_I2B
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
